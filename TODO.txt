1) New 'REST Consumer Task' (alternative for current (SOAP-)Webservice task).
	- simple proof-of-concept REST task implemented
	- needs finalization (input fields/options/icons/...)

2) Deploy and run a process which includes so called 'REST-Activities'.
   These activities should be exposed via REST.
     - GET requests on these activies should return e.g. 'the status'.
     - PUT requests on these activies should return e.g. 'end the execution'. or(!)
       control the process flow (see Notes/Problems (1))

3) Emulate published (PUT-)Rest via UserTasks (in order to complete and control the flow)

4) REST-Event-Gateway

5) Moar?

==================================================================================================

Notes/Problems:

[SOLVED] (1) Still unknown how these user tasks could be emulated/implemented. Possibilities:
	- extend/change the deployer (deployer will behave differently if it encounters certain indicators,
	  e.g. manually replacing service tasks with user tasks in the corresponding xml file)

[SOLVED] (2) Error 415 while trying to use the REST User Task API (e.g. completing a task)
	=> make sure that the client actually uses 'Content-Type: application-json' (!)

[SOLVED] (3) - Idea for 2): See 'UserTaskParseHandler' and 'ServiceTaskParseHandler' for reference. Adjust the user task process
    to the service tasks.
    - maybe clone/create execution when process flow hits the custom task (in order to emulate a user task afterwards)

(4) REST publish tasks are not being treated differently from (regular) user tasks (both task types can be queried via REST equally)
    Quick'n'Dirty: REST publish tasks ids have to start with a predefined prefix, e.g. 'rest_pub_*'
    (!) Same goes for REST processes; these cannot be flagged properly due to editor limitations.
    Idea: Convention for both REST tasks and processes (e.g. name has to start with a specific prefix)